# 使用ImageBuild的方式
# - Master: 主路由模式，功能较全
# - AP:     Ap模式 精简

name: Immortalwrt ImageBuild Master x86_64

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      perform_deploy:
        required: true
        default: true
        type: boolean

env:
  IMAGE_BUILD_URL: https://downloads.immortalwrt.org/releases/24.10.0/targets/x86/64/immortalwrt-imagebuilder-24.10.0-x86-64.Linux-x86_64.tar.zst
  SDK_URL: https://downloads.immortalwrt.org/releases/24.10.0/targets/x86/64/immortalwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
  IMAGE_BUILD_NAME: immortalwrt-imagebuilder-24.10.0-x86-64.Linux-x86_64.tar.zst
  NIKKI_URL: https://github.com/nikkinikki-org/OpenWrt-nikki
  NIKKI_FEED_URL: https://nikkinikki.pages.dev/openwrt-24.10/x86_64/nikki
  NETSPEEDTEST_URL: https://github.com/sirpdboy/netspeedtest.git
  GECOOSAC_URL: https://github.com/lwb1978/openwrt-gecoosac
  IS_ENABLE: 1
  IS_SSH_DEBUG: false
  UPLOAD_RELEASE: true
  DELETE_USELESS_FILES: true
  ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
  NETWORK_LAN_IP: ${{ secrets.NETWORK_LAN_IP }}
  ZEROTIER_ID: ${{ secrets.ZEROTIER_ID }}
  VPS_IP: ${{ secrets.VPS_IP }}
  NETWORK_WAN_USERNAME: ${{ secrets.NETWORK_WAN_USERNAME }}
  NETWORK_WAN_PASSWORD: ${{ secrets.NETWORK_WAN_PASSWORD }}
  NETWORK_WG_PRESHARED_KEY_ONEPLUS: ${{ secrets.NETWORK_WG_PRESHARED_KEY_ONEPLUS }}
  NETWORK_WG_PRESHARED_KEY_MAC_AIR: ${{ secrets.NETWORK_WG_PRESHARED_KEY_MAC_AIR }}
  NETWORK_WG_PRESHARED_KEY_VPS: ${{ secrets.NETWORK_WG_PRESHARED_KEY_VPS }}
  CLOUDFLARED_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARED_TUNNEL_TOKEN }}
  CLOUDFLARED_SECRET: ${{ secrets.CLOUDFLARED_SECRET }}
  CLOUDFLARED_DDNS_DOMAIN_WG: ${{ secrets.CLOUDFLARED_DDNS_DOMAIN_WG }}
  CLOUDFLARED_DDNS_DOMAIN_WGFOUR: ${{ secrets.CLOUDFLARED_DDNS_DOMAIN_WGFOUR }}
  CLOUDFLARED_DDNS_DOMAIN_WGSIX: ${{ secrets.CLOUDFLARED_DDNS_DOMAIN_WGFOUR }}
  CLOUDFLARED_DDNS_DOMAIN_RUSTDESK: ${{ secrets.CLOUDFLARED_DDNS_DOMAIN_RUSTDESK }}

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ inputs.perform_deploy }}
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: "Optimize disk space"
      if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Initialization System environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /etc/apt/sources.list.d/* /etc/mysql /etc/php /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift
        sudo swapoff -a
        sudo rm -f /mnt/swapfile
        sudo -E apt-get -qq update
        sudo -E apt-get -qq -y purge azure-cli* ghc* zulu* llvm* firefox google* powershell* openjdk* mysql* php* mongodb* dotnet* snap* postgresql* podman microsoft-edge-stable ruby* golang* java-common node* ubuntu-mono fonts-noto-mono mono* libmono* openjdk-11-jre-headless
        sudo -E apt-get -qq install ca-certificates curl gnupg
        sudo -E apt -y full-upgrade
        sudo apt-get install -y -qq zstd patch tree
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E apt-get -qq -y install libfuse-dev
        sudo -E apt-get -qq -y clean
        sudo -E apt-get -qq -y autoclean
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Initialization OpenWrt SDK
      run: |
        wget -O immortalwrt-sdk.tar.zst -c $SDK_URL || { echo "Download failed"; exit 1; }
        mkdir -p $GITHUB_WORKSPACE/sdk
        tar -I zstd -xf immortalwrt-sdk.tar.zst -C $GITHUB_WORKSPACE/sdk --strip-components=1
        rm -rf immortalwrt-sdk.tar.zst
        cd $GITHUB_WORKSPACE/sdk
        git clone $NETSPEEDTEST_URL package/netspeedtest
        git clone $NIKKI_URL package/nikki
        git clone $GECOOSAC_URL package/openwrt-gecoosac
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make defconfig

    - name: Setup upterm session
      if: env.IS_SSH_DEBUG == 'true'
      uses: lhotari/action-upterm@v1
    
    - name: Build SDK Package
      run: |
        cd $GITHUB_WORKSPACE/sdk
        make -j$(nproc) package/netspeedtest/luci-app-netspeedtest/compile \
          package/openwrt-gecoosac/luci-app-gecoosac/compile \
          package/nikki/luci-app-nikki/compile V=s || { echo "Compile failed"; exit 1; }
        echo '============1============='
        ls -al $GITHUB_WORKSPACE/sdk/bin/packages/x86_64/base/
        echo '============2============='
        ls -al $GITHUB_WORKSPACE/sdk/bin/packages/x86_64/*/
        echo '============3============='

    - name: Download ImageBuild
      run: |
        wget -O $IMAGE_BUILD_NAME -c $IMAGE_BUILD_URL || { echo "Download failed"; exit 1; }
        mkdir -p $GITHUB_WORKSPACE/imagebuilder
        tar -I zstd -xf $IMAGE_BUILD_NAME -C $GITHUB_WORKSPACE/imagebuilder --strip-components=1
        rm -rf $IMAGE_BUILD_NAME

    - name: Apply config patch
      run: |
        cd $GITHUB_WORKSPACE/imagebuilder && ls -al
        if [ -f .config ]; then
          patch .config < $GITHUB_WORKSPACE/master.config.patch || { echo "Patch failed"; exit 1; }
          echo "Patch applied successfully"
          grep "CONFIG_ISO_IMAGES" .config
          grep "CONFIG_TARGET_KERNEL_PARTSIZE" .config
        else
          echo "No .config found"
          exit 1
        fi

    - name: Build the firmware
      id: compile
      run: |
        sed -i "s|\$ROOT_PASSWORD|$ROOT_PASSWORD|g" "$GITHUB_WORKSPACE/files/master/etc/uci-defaults/91-system-root"

        sed -i "s|\$CLOUDFLARED_SECRET|$CLOUDFLARED_SECRET|g" "$GITHUB_WORKSPACE/files/master/etc/ddns-go/config.yaml"
        sed -i "s|\$CLOUDFLARED_DDNS_DOMAIN_WGFOUR|$CLOUDFLARED_DDNS_DOMAIN_WGFOUR|g" "$GITHUB_WORKSPACE/files/master/etc/ddns-go/config.yaml"
        sed -i "s|\$CLOUDFLARED_DDNS_DOMAIN_WGSIX|$CLOUDFLARED_DDNS_DOMAIN_WGSIX|g" "$GITHUB_WORKSPACE/files/master/etc/ddns-go/config.yaml"
        sed -i "s|\$CLOUDFLARED_DDNS_DOMAIN_WG|$CLOUDFLARED_DDNS_DOMAIN_WG|g" "$GITHUB_WORKSPACE/files/master/etc/ddns-go/config.yaml"
        sed -i "s|\$CLOUDFLARED_DDNS_DOMAIN_RUSTDESK|$CLOUDFLARED_DDNS_DOMAIN_RUSTDESK|g" "$GITHUB_WORKSPACE/files/master/etc/ddns-go/config.yaml"

        for file in $(find $GITHUB_WORKSPACE/files/master/etc/uci-defaults -type f); do
          sed -i "s|\$IS_ENABLE|$IS_ENABLE|g" "$file"
          sed -i "s|\$ZEROTIER_ID|$ZEROTIER_ID|g" "$file"
          sed -i "s|\$VPS_IP|$VPS_IP|g" "$file"
          sed -i "s|\$NIKKI_FEED_URL|$NIKKI_FEED_URL|g" "$file"
          sed -i "s|\$NETWORK_LAN_IP|$NETWORK_LAN_IP|g" "$file"
          sed -i "s|\$NETWORK_WAN_USERNAME|$NETWORK_WAN_USERNAME|g" "$file"
          sed -i "s|\$NETWORK_WG_PRESHARED_KEY_ONEPLUS|$NETWORK_WG_PRESHARED_KEY_ONEPLUS|g" "$file"
          sed -i "s|\$NETWORK_WG_PRESHARED_KEY_MAC_AIR|$NETWORK_WG_PRESHARED_KEY_MAC_AIR|g" "$file"
          sed -i "s|\$NETWORK_WG_PRESHARED_KEY_VPS|$NETWORK_WG_PRESHARED_KEY_VPS|g" "$file"
          sed -i "s|\$CLOUDFLARED_TUNNEL_TOKEN|$CLOUDFLARED_TUNNEL_TOKEN|g" "$file"
        done
        
        cp $GITHUB_WORKSPACE/sdk/bin/packages/x86_64/base/*.ipk $GITHUB_WORKSPACE/imagebuilder/packages/
        PACKAGES=$(cat $GITHUB_WORKSPACE/master.packages.txt | tr '\n' ' ')
        cd $GITHUB_WORKSPACE/imagebuilder
        make image PROFILE="generic" PACKAGES="$PACKAGES" FILES="$GITHUB_WORKSPACE/files/master" || { echo "Compile failed"; exit 1; }
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd imagebuilder/bin/targets/x86/64/ || { echo "Directory not found"; exit 1; }
        sha256sum *.img.gz > checksums.txt
        echo "firmware=$PWD" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        echo "release_tag=ImmortalWrt-Master-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "ImmortalWrt Master Build" > release.txt
        cat imagebuilder/bin/targets/x86/64/checksums.txt >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: env.UPLOAD_RELEASE == 'true' && steps.tag.outputs.status == 'success' && steps.compile.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ steps.organize.outputs.firmware }}/*

    - name: Delete workflow runs
      if: steps.compile.outputs.status == 'success' && !cancelled()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Delete Older Releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
